{basics}
{either}
{list}
{parser}
{expressionParser}
[declaration = either string(import) (exprDecl bool(public or private?) `tup ast)]
[code = list of declarations]
importParser = left `mapParser charParser '{' `appendParserIgnoringL wordParser `appendParserIgnoringR charParser '}'
exprDeclParser = (rev a -> rev b -> c -> right `id a `tup c) `mapParser wordParser `spaceSeparatedParser charParser '=' `spaceSeparatedParser standardExpressionParser
standardDeclarationParser = importParser `choiceParser exprDeclParser
codeParserWithoutWhitespaceBeforeAndAfter _= fix self -> standardDeclarationParser `bindParser d -> (appendParserIgnoringL whitespaceParser self `mapParser consList d) `choiceParser emptyParser `id singletonList d [TODO this seems to be a common ish pattern, maybe make a function for it]
standardCodeParser = optionalParser whitespaceParser `appendIgnoringL codeParserWithoutWhitespaceBeforeAndAfter `appendIgnoringR optionalParser whitespaceParser
