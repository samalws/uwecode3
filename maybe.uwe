[maybe a = (a -> b) -> b -> b]
{basics}
{bool}
{nFuncs}
just = x -> f -> g -> f x
none = ignore
isJust = nRev 2 (const true) false
[maybe a -> (a -> maybe b) -> maybe b]
[as in haskell, maybes form a monad with bindMaybe and none]
bindMaybe = x -> y -> x y none
[(a -> a -> bool) -> maybe a -> maybe a -> bool]
eqMaybe = eq -> x -> y -> x (v -> y (eq v) false) (y (const false) true)
