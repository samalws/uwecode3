{basics}
{tup}
{list}
{parser}
{enclosedParser}
{ast}
{varAst}
wordParser = (many1Parser `id "qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM1234567890~!@#$%^&*_+-=|;:<>?,./" (choiceParser `comp charParser) failParser) `bindParser s -> eqString s "=" (const `id 0 `tup replaceList (eqChar singleQuoteChar) '"' "Unexpected '='") `id emptyParser s
commentParser = charParser '[' `appendParser manyParser (nonCharParser ']') `appendParser charParser ']'
whitespaceParser = many1Parser (spaceParser `appendParser commentParser) `appendParser spaceParser
spaceSeparatedParser = p1 -> p2 -> p1 `appendParser whitespaceParser `appendIgnoringLParser p2
funcParser = expParser -> wordParser `spaceSeparatedParser stringParser "->" `spaceSeparatedParser expParser
infixCallParser = expParserBig -> expParserSmall -> (expParserSmall `spaceSeparatedParser (charParser '`' `appendParser wordParser) `spaceSeparatedParser expParserBig) `mapParser rev x -> rev m -> y -> m _ -> f -> called f x `called y
varParser = wordParser `mapParser namedVar
calledParser = expParser -> (expParser `spaceSeparatedParser expParser) `mapParser rev called
parenParser = expParser -> charParser '(' `appendIgnoringLParser expParser `appendIgnoringRParser charParser ')') [TODO maybe space at beginning and end]
strParser = mapParser str `id charParser '"' `appendIgnoringLParser manyParser (nonCharParser '"') `appendIgnoringRParser charParser '"'
chrParser = mapParser chr `id charParser singleQuoteChar `appendIgnoringLParser manyParser (nonCharParser singleQuoteChar) `appendIgnoringRParser charParser singleQuoteChar
numParser = mapParser num natParser
standardExpressionParser = VarAst->Ast `mapParser fix selfBig -> (selfSmall -> funcParser selfBig `choiceParser infixCallParser selfBig selfSmall `choiceParser selfSmall) `id strParser `choiceParser chrParser `choiceParser numParser `choiceParser varParser `choiceParser calledParser selfBig `choiceParser parenParser selfBig
