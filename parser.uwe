{basics}
{either}
{tup}
{list}
{string}
{nFuncs}
[parser a: string -> either (nat,string)(error char number,error msg) (a,string)(thing parsed, remaining after done parsing)]
bindParser = p -> f -> s -> p s `bindEither rev r -> s2 -> f r s2 (rev charNum -> errMsg -> left `id (charNum `addNat lenList s `minusNat lenList s2) `tup errMsg) right
appendParser = p1 -> p2 -> p1 `bindParsers p2 `comp sndTup
choiceParser = p1 -> p2 -> s -> p1 s (rev errLoc1 -> err1 -> p2 s (rev errLoc2 -> err2 -> left `id chooseGrNat errLoc1 errLoc2 (errLoc1 `tup err1) (errLoc2 `tup err2) (errLoc1 `tup err1 `concatList " OR " `concatList err2)) right) right
mapFailableParser = f -> p -> p `bindParser rev r -> s -> f r left (r2 -> right `id r2 `tup s)
mapParser = f -> mapFailableParser `id right `comp f
appendWithFuncParser = f -> p1 -> p2 -> rev f `mapParser appendParser p1 p2
appendWithConsListParser = appendWithFuncParser consList
appendIgnoringLParser = appendWithFuncParser const
appendIgnoringLParser = appendWithFuncParser ignore
emptyParser = v -> s -> right `id v `tup s
optionalParser = p -> v -> p `choiceParser emptyParser v
failParser = const `id left `id 0 `tup ""
emptyStringParseErr = left `id 0 `tup "Unexpected end of parse"
charSatisfiesParser = f -> e -> nRev 2 (h -> r -> f h (right `id c `tup ScottList->List r) (left `id 1 `tup e)) emptyStringParseErr `comp List->ScottList
charParser = c -> charSatisfiesParser (eqChar c) ("Expected character " `concatList singleList c)
nonCharParser = c -> charSatisfiesParser (notBool `comp eqChar c) ("Didn't expect character " `concatList singleList c)
strParser = nRev 2 (appendWithConsListParser `comp charParser) emptyParser
manyParser = p -> fix self -> optionalParser emptyList `id p `appendWithConsListParser self
many1Parser = p -> p `appendWithConsListParser manyParser p
digitParser = sndTup `id "0123456789" (digit -> rev n -> currentParser -> succNat n `tup currentParser `choiceParser const n `mapParser charParser digit) (0 `tup failParser)
natParser = (sndTup `comp nRev 2 (digit -> rev mult -> n -> mulNat 10 mult `tup n `addNat mult `mulNat digit) (1 `tup 0)) `mapParser many1Parser digitParser 
whitespaceParser = many1Parser `id mapList charParser "   
" choiceParser failParser
