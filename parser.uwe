{basics}
{either}
{tup}
{list}
{string}
{nFuncs}
0 _= ignore
2 _= f -> x -> f (f x)
10 _= addNat 2 `id mulNat 2 `id mulNat 2 2
[parser a: string -> either (nat,string)(error char number,error msg) (a,string)(thing parsed, remaining after done parsing)] [TODO WHAT ABOUT EOF]
[TODO what the hell are the next 2 lines]
bindParser = p -> f -> s -> p s `bindEither rev r -> s2 -> f r s2 (rev charNum -> errMsg -> left `id (charNum `addNat lenList s `minusNat lenList s2) `tup errMsg) right
appendParser = p1 -> p2 -> p1 `bindParsers p2 `comp sndTup
choiceParser = p1 -> p2 -> s -> p1 s (rev errLoc1 -> err1 -> p2 s (rev errLoc2 -> err2 -> chooseGrNat errLoc1 errLoc2 (errLoc1 `tup err1) (errLoc2 `tup err2) (errLoc1 `tup err1 `concatList " OR " `concatList err2)) right) right
mapParserFailable = p -> f -> s -> p s `bindEither rev parsed -> remaining -> f parsed `bindEither fParsed -> fParsed `tup remaining
mapParser = p -> mapParserFailable p `comp comp right [TODO this would be better if the function came first]
appendIgnoringLParser = p1 -> p2 -> p1 `bindParsers const p2
appendIgnoringRParser = p1 -> p2 -> p1 `bindParsers v -> p2 `mapParser const v
emptyParser = v -> s -> right `id v `tup s
failParser = const `id left `id 0 `tup ""
emptyStringParseErr = left `id 0 `tup "Unexpected end of parse" [TODO u sure about this one]
expectingNonEndParser = f -> s -> s f emptyStringParseFail
charSatisfiesParser = f -> e -> expectingNonEndParser h -> r -> f h (right `id c `tup r) (left e)
charParser = c -> charSatisfiesParser (eqChar c) (0 `tup "Expected character " `concatList singleList h `concatList ", expected " `concatList singleList c)
strParser = s -> s (c -> charParser c `appendParser) emptyParser `mapParser const s
manyParser = p -> (fix self -> (p `bindParser result -> s -> self s `mapParser consList result) `choiceParser emptyParser emptyList) `mapParser reverseList
many1Parser = p -> (fix self -> (p `bindParser result -> s -> self s `mapParser consList result) `choiceParser p `mapParser singleList) `mapParser reverseList
digitParser _= sndTup `id "0123456789" (digit -> rev n -> currentParser -> succNat n `tup currentParser `choiceParser charParser digit `mapParser const n) (0 `tup failParser)
natParser = many1Parser digitParser `mapParser sndTup `comp nRev 2 (digit -> rev mult -> n -> mulNat 10 mult `tup n `addNat mult `mulNat digit) (1 `tup 0)
whitespaceParser = many1Parser `id " \t\n" choiceParser failParser
