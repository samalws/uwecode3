{basics}
{tup}
{either}
{nat}
{nFuncs}
0 _= const
2 _= f -> x -> f (f x)
[Folded t: (t -> a -> a) -> a -> a]
emptyFolded = ignore
consFolded = h -> r -> f -> g -> f h `id f r g
singleFolded = rev emptyFolded `comp consFolded
mapFolded = f -> nRev 2 (consFolded `comp f) emptyFolded
filterFolded = f -> nRev 2 (h -> r -> f h (h `consFolded r) r) emptyFolded
lenFolded = nRev 2 succNat 0
headFolded = nRev 2 (const `comp just) none
tailFolded = fstTup `comp nRev 2 (h -> just `comp consFolded h `comp nRev 2 (t -> fstTup t `consFolded sndTup t) emptyList) none
getFromBackFolded _= n -> nRev 2 id (const none) `comp nRev 2 (h -> bindEither n2 -> eqNat n n2 (right h) (left `id succNat n2)) `id right 0
[TODO check above, reverseFolded, getFolded, sortFolded?, mergeFolded]
