{basics}
{bool}
0 _= ignore
nComp2 _= x -> y -> f -> f x y
succNat = n -> f -> f `comp n f
addNat = rev succNat
mulNat = a -> b -> f -> a `id b f
expNat = rev
Nat->ScottNat = nRev2 (r -> const `comp rev r) 0
ScottNat->Nat = fix self -> nRev2 (r -> f -> f `comp self r f) 0
shiftInc _= t -> sndTup t `tup succNat `id sndTup t
decNat = ScottNat->Nat `comp nRev2 id 0 `comp Nat->ScottNat
minusNat = rev decNat
isZeroNat = nRev2 (const false) true
divNat = a -> b -> (a `tup 0) `rev fix self -> t -> fstTup t `rev subbedA -> sndTup t `rev divResult -> isZeroNat divResult divResult `id self `id minusNat subbedA b `tup succNat divResult
modNat = a -> b -> a `rev fix self -> subbedA -> minusNat subbedA b `rev subbedA2 -> isZeroNat subbedA2 subbedA `id self subbedA2
leqNat = a -> b -> isZeroNat `id minusNat a b
geqNat = a -> b -> leqNat b a
eqNat = a -> b -> leqNat a b `andBool geqNat a b
ltNat = a -> b -> leqNat a b `andBool notBool `id eqNat a b
gtNat = a -> b -> geqNat a b `andBool notBool `id eqNat a b
chooseGrNat = a -> b -> aGr -> bGr -> eq -> eqNat a b eq `id leqNat a b bGr aGr
