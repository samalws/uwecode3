[either a b = (a -> c) -> (b -> c) -> c]
{basics}
{bool}
{maybe}
{nFuncs}
left  = x -> f -> g -> f x
right = x -> f -> g -> g x
isLeft = nRev 2 (const true) (const false)
isRight = notBool `comp isLeft
[either a b -> (b -> either a c) -> either a c]
[as in haskell, eithers form a monad with bindEither and left]
bindEither = x -> y -> x left y
[either a b -> either b a]
switchEither = x -> f -> g -> x g f
[(a -> a -> bool) -> (b -> b -> bool) -> either a b -> either a b -> bool]
eqEither = eql -> eqr -> x -> y -> x (z -> y (eql x) false) (z -> y false (eqr z))
[just becomes right, none becomes left v]
Maybe->Either = v -> nRev 2 right `id left v
